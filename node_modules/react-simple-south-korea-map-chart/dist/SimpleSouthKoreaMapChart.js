import React from "react";
import { useEffect, useState } from "react";
import { SouthKoreaSvgMap } from "./SouthKoreaSvgMap";
const DefaultTooltip = ({ darkMode, tooltipStyle, children }) => {
    return (React.createElement("div", { style: Object.assign({ borderRadius: "10px", color: darkMode ? "#f5f5f5" : "#41444a", position: "fixed", minWidth: "80px", padding: "10px", border: `1px solid ${darkMode ? "#41444a" : "#f5f5f5"}`, backgroundColor: darkMode ? "#41444a" : "#fff" }, tooltipStyle) }, children));
};
export const SimpleSouthKoreaMapChart = ({ darkMode = false, data, unit = "ê°œ", setColorByCount, customTooltip, }) => {
    const [mapData, setMapData] = useState({});
    const [tooltipMsg, setTooltipMsg] = useState("");
    const [tooltipStyle, setTooltipStyle] = useState(false);
    useEffect(() => {
        const items = data.reduce((acc, item) => {
            return Object.assign(Object.assign({}, acc), { [item.locale]: item.count });
        }, {});
        setMapData(items);
    }, [data]);
    const handleLocationMouseOver = (event) => {
        const location = event.target.attributes.name.value;
        const count = mapData[location] ? mapData[location] : 0;
        setTooltipMsg(`${location}: ${count}${unit}`);
    };
    const handleLocationMouseOut = () => {
        setTooltipStyle({ display: "none" });
    };
    const handleLocationMouseMove = (event) => {
        const tooltipStyle = {
            display: "block",
            top: event.clientY - 50,
            left: event.clientX - 60,
        };
        setTooltipStyle(tooltipStyle);
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(SouthKoreaSvgMap, { data: mapData, setColorByCount: setColorByCount, onLocationMouseOver: handleLocationMouseOver, onLocationMouseOut: handleLocationMouseOut, onLocationMouseMove: handleLocationMouseMove }),
        customTooltip ? (React.cloneElement(customTooltip, {
            darkMode,
            tooltipStyle,
            children: tooltipMsg,
        })) : (React.createElement(DefaultTooltip, { darkMode: darkMode, tooltipStyle: tooltipStyle }, tooltipMsg))));
};
